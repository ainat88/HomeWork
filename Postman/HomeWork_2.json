{
	"info": {
		"_postman_id": "09f8753c-1e15-4428-a7cf-c3a8846a179f",
		"name": "HomeWork_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200// \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200// \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json//\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)//\r",
							"pm.test(\"Check age\", function () {\r",
							"   pm.expect(jsonData.age).to.eql(\"33\");\r",
							"});\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)//\r",
							"pm.test(\"Check name\", function () {\r",
							"   pm.expect(jsonData.name).to.eql(\"Tanya\");\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)//\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(500);\r",
							"});\r",
							"\r",
							"//Спарсить request//\r",
							"let yolochka=request.data;\r",
							"\r",
							"console.log(yolochka);\r",
							"\r",
							"console.log(jsonData);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)//\r",
							"pm.test(\"Check name in response = name in request\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(yolochka.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (name забрать из request)//\r",
							"pm.test(\"Check age in response = age in request\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(yolochka.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)//\r",
							"pm.test(\"Check salary in response = salary in request\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+yolochka.salary);\r",
							"});\r",
							"\r",
							"console.log(yolochka.salary);\r",
							"\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"console.log(+yolochka.salary);\r",
							"\r",
							"//Вывести в консоль параметр family из response.//\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)//\r",
							"pm.test(\"Check u_salary_1_5_year = salary*4\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(yolochka.salary * 4);\r",
							"});\r",
							"\r",
							"console.log(yolochka.salary * 4);\r",
							"\r",
							"console.log(jsonData.family.u_salary_1_5_year);\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Tanya",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200// \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.//\r",
							"let res_1 = pm.response.json ();\r",
							"\r",
							"//Спарсить request//\r",
							"let req_1 = pm.request.url.query.toObject()\r",
							"\r",
							"console.log(res_1);\r",
							"\r",
							"console.log(req_1);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)//\r",
							"pm.test(\"Check name in response = name in request\", function () {\r",
							"    pm.expect(req_1.name).to.eql(res_1.name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)//\r",
							"pm.test(\"Check age in response = name in request\", function () {\r",
							"    pm.expect(req_1.age).to.eql(res_1.age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)//\r",
							"pm.test(\"Check salary in response = salary in request\", function () {\r",
							"    pm.expect(+req_1.salary).to.eql(res_1.salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.//\r",
							"console.log(res_1.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.//\r",
							"pm.test(\"Parameter dog have parameter age\", function () {\r",
							"    pm.expect(res_1.family.pets.dog).to.have.property('age');\r",
							"});\r",
							"\r",
							"console.log(req_1);\r",
							"\r",
							"console.log(res_1.family.pets.dog);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.//\r",
							"pm.test(\"Parameter dog have parameter age\", function () {\r",
							"    pm.expect(res_1.family.pets.dog).to.have.any.keys('age');\r",
							"});\r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky.//\r",
							"pm.test(\"Parameter name have parameter Lucky\", function () {\r",
							"    pm.expect(res_1.family.pets.dog.name).to.eql('Luky');\r",
							"});\r",
							"\r",
							"console.log(res_1.family.pets.dog.name);\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.//\r",
							"pm.test(\"Harameter age have parameter 4\", function () {\r",
							"    pm.expect(res_1.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Tanya&age=33&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Tanya"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200// \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.//\r",
							"let resp_1 = pm.response.json ();\r",
							"\r",
							"//Спарсить request.//\r",
							"let requ_1 = pm.request.url.query.toObject()\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.//)\r",
							"pm.test(\"Check name in response = name in request\", function () {\r",
							"    pm.expect(requ_1.name).to.eql(resp_1.name);\r",
							"});\r",
							"\r",
							"console.log(+requ_1.age);\r",
							"\r",
							"console.log(resp_1.age);\r",
							"\r",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)//\r",
							"pm.test(\"Check age in response = age in request\", function () {\r",
							"    pm.expect(+requ_1.age).to.eql(resp_1.age);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр salary из request.//\r",
							"console.log(requ_1.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.//\r",
							"console.log(resp_1.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.//\r",
							"console.log(resp_1.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.//\r",
							"console.log(+resp_1.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.//\r",
							"console.log(+resp_1.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)//\r",
							"pm.test(\"Check [0]) = salary in request\", function () {\r",
							"    pm.expect(resp_1.salary[0]).to.eql(+requ_1.salary);\r",
							"});\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)//\r",
							"pm.test(\"Check [1] = salary*2 in request\", function () {\r",
							"    pm.expect(+resp_1.salary[1]).to.eql(requ_1.salary * 2);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)//\r",
							"pm.test(\"Check [2] = salary*3 in request\", function () {\r",
							"    pm.expect(+resp_1.salary[2]).to.eql(requ_1.salary * 3);\r",
							"});\r",
							"\r",
							"//Передать в окружение переменную name//\r",
							"pm.environment.set(\"name\",\"Tanya\");\r",
							"\r",
							"//Передать в окружение переменную age//\r",
							"pm.environment.set(\"age\",33);\r",
							"\r",
							"//Передать в окружение переменную salary//\r",
							"pm.environment.set(\"salary\",500);\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.//\r",
							"let cycle = pm.response.json ().salary\r",
							"for (key in cycle)\r",
							"console.log(cycle[key]);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{url}}/object_info_4?name=Tanya&age=33&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Tanya"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		}
	]
}